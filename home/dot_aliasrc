# Docker
#alias docker=podman
#alias docker-compose="podman compose"
alias dcu="docker compose up -d"
alias dps="docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Image}}""
alias dd="docker compose down"
alias vwipe="docker volume rm $(docker volume ls -q)"

# Git
alias gco="git checkout"
alias gpl="git pull"
alias gps="git push"
alias gr="git rebase"
alias gra="git rebase --abort"
alias grc="git rebase --continue"
alias grm='branch=$(git branch --show-current) && git stash && git checkout master && git pull origin master && git checkout $branch && git rebase master && git stash pop'

# Github cli commands
alias ghrv="gh repo view --web"

# General
alias ls='ls --color=auto'
alias ll="ls -la --color=auto"
alias code="code-insiders"

# Dotfiles
alias cm="chezmoi"
alias cmapply="chezmoi apply && source ~/.zshrc"

# local AI
alias oldb="ollama run deepseek-r1:70b"
alias olds="ollama run deepseek-r1:7b"
alias ols="ollama serve"

# Github Copilot
alias cop='gh copilot suggest' # Ask for a generic shell command
alias gitcop='gh copilot suggest --type git' # Ask for a git command
alias ghcop='gh copilot suggest --type gh' # Ask for a GitHub CLI command

# Kubectl
alias kc="kubectl"
alias kh="kubehelp"


## Exports

# Export list for filtered homebrew packages
export BREW_EXCLUDES=(
  font-3270-nerd-font
  font-fira-code-nerd-font
  logi-options-plus
  logi-options+
  tunnelblick
  cursor
  podman-desktop
  blackhole-16ch
  cbeaver-community
  iterm2
  openvpn-connect
  raindropio
  slack
  visual-studio-code
)

## Functions

# Import SaaS Functions
if [ -f "$HOME/.saasrc" ]; then
  . "$HOME/.saasrc"
fi

# Function to find files with extensions and copy to clipboard
function copy_filenames() {
    local path="${1}"
    find "$path" -type f -name '*.*' -print | xclip -selection clipboard
    echo "Filenames with extensions have been copied to the clipboard."
}

# Start ollama open web ui
function olui {
  echo "Ollama Webui starts with port: 9783"
  docker start open webui
  # Docker run command: docker run -p 9783:8080 -v open-webui:/app/backend/data --name open-webui ghcr.io/open-webui/open-webui:main
}

# Edit a file managed by chezmoi
function cmedit {
  chezmoi edit ~/."$1"
}

# Stop and remove all Docker containers, volumes, and perform system cleanup
function dwipe {
  echo "Executing docker compose down"
  docker compose down --volumes
  echo "Stopping and removing all containers"
  # Stop and remove all containers
  containers=$(docker ps -aq)
  if [ -n "$containers" ]; then
    for container in $containers; do
      docker stop $container >/dev/null 2>&1
      docker rm $container >/dev/null 2>&1
    done
    echo "All containers stopped and removed."
  else
    echo "No containers to stop and remove."
  fi

  echo "Removing all stopped containers, networks, dangling images and build cache"
  # Perform Docker system cleanup
  docker system prune --force --volumes >/dev/null 2>&1
  echo "Docker system cleaned."
}

# Remove all Docker images
function iwipe {
  echo "Removing all images"
  docker image prune -a -f
}

# Displays docker logs
function dl {
  local container_name=$1
  local tail_lines=${2:-10}
  docker logs --follow --tail=$tail_lines $container_name
}

# Displays Docker logs in JSON format
function dlp {
  local container_name=$1
  local tail_lines=${2:-10}
  dl "$container_name" "$tail_lines" | fx 'json => `\x1b[36m${new Date(json.timestamp).toLocaleTimeString("de-DE")}\x1b[0m | \x1b[32m${json.message}\x1b[0m${json.metadata ? ` | \x1b[33m${JSON.stringify(json.metadata)}\x1b[0m` : ""}`'
}

# Displays Docker logs in plain text format
function dlr {
  local container_name=$1
  local tail_lines=${2:-10} 
  dl "$container_name" "$tail_lines" | fx 'json => ({
    timestamp: new Date(json.timestamp).toLocaleTimeString("de-DE"),
    message: json.message,
    ...(json.metadata && { metadata: json.metadata })
  })'
}

# Retrieve a password from a KeePassXC database
function pass() {
  keepassxc-cli show -s -f Password /path/to/your/database.kdbx "$1"
}

# Get the effective docker compose config via compose file
function dconf() {
  local compose_file=${1:-'docker-compose.yml'}
  docker compose --project-directory . -f "$compose_file" config
}

# Validate all js files in the current project
function nodec() {
  node --check $(find . -name "*.js")
}

# Print out important kubectl commands
kubehelp() {
  echo "### Important kubectl Commands"
  echo ""
  echo "**Listing Resources:**"
  echo "- `kubectl get pods`: List all pods in the current namespace."
  echo "- `kubectl get pods --all-namespaces`: List all pods across all namespaces."
  echo "- `kubectl get svc`: List all services in the current namespace."
  echo "- `kubectl get deployments`: List all deployments in the current namespace."
  echo ""
  echo "**Creating and Deleting Resources:**"
  echo "- `kubectl create deployment <name> --image=<image>`: Create a new deployment."
  echo "- `kubectl delete pod <pod_name>`: Delete a specific pod."
  echo ""
  echo "**Describing and Debugging Resources:**"
  echo "- `kubectl describe pod <pod_name>`: Show detailed information about a pod."
  echo "- `kubectl logs <pod_name>`: Show logs of a pod."
  echo "- `kubectl exec -it <pod_name> -- /bin/bash`: Open an interactive shell in a running pod."
  echo ""
  echo "**Scaling and Rolling Back Deployments:**"
  echo "- `kubectl scale deployment <deployment_name> --replicas=<number>`: Scale a deployment."
  echo "- `kubectl rollout status deployment/<deployment_name>`: Check the status of a rollout."
  echo "- `kubectl rollout undo deployment/<deployment_name>`: Roll back a deployment to the previous version."
}

# Updates brew with exclude list

# Funktion: brew update & upgrade ohne bestimmte Casks
brewu() {
  local exclude_pattern=""
  for pkg in "${BREW_EXCLUDES[@]}"; do
    escaped_pkg=$(printf '%s\n' "$pkg" | sed -e 's/[][\.^$*+?{}|]/\\&/g')
    exclude_pattern+="${exclude_pattern:+|}$escaped_pkg"
  done

  brew update || echo "⚠️ brew update fehlgeschlagen (ggf. temporär)"

  local all_casks
  all_casks=($(brew list --cask))

  local upgradable_casks=()
  for cask in "${all_casks[@]}"; do
    if ! printf '%s\n' "$cask" | grep -E -q "$exclude_pattern"; then
      upgradable_casks+=("$cask")
    fi
  done

  if [[ ${#upgradable_casks[@]} -eq 0 ]]; then
    echo "ℹ️ Keine Casks zu upgraden."
  else
    brew upgrade --cask "${upgradable_casks[@]}"
  fi

  echo ""
  echo "⛔ Diese Casks wurden **nicht** geupdatet:"
  for cask in "${BREW_EXCLUDES[@]}"; do
    echo "  - $cask"
  done

  brew list --pinned
}
